// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc3018.BetaTest1.subsystems;
import org.usfirst.frc3018.BetaTest1.RobotMap;
import org.usfirst.frc3018.BetaTest1.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc3018.BetaTest1.Robot;
/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar rightFront = RobotMap.driveTrainRightFront;
    CANJaguar rightBack = RobotMap.driveTrainRightBack;
    CANJaguar leftFront = RobotMap.driveTrainLeftFront;
    CANJaguar leftBack = RobotMap.driveTrainLeftBack;
    RobotDrive _drive = RobotMap.driveTrain_drive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    
    private boolean _isInverted = false;
    private boolean _throttleUsed = true;
    private double _lastSpeed = 0;
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new TeleopControl());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void setInversion(boolean isInvertedNow){
        _isInverted = isInvertedNow;
    }
    
    public boolean checkIfInverted(){
        return _isInverted;
    }
    
    public void setThrottleUsage(boolean isUsed){
        _throttleUsed = isUsed;
    }
    
    public boolean checkThrottleUsage(){
        return _throttleUsed;
    }
    
    public void arcadeDrive(double speed, double turn){
        if(_throttleUsed){
            speed = speed*Robot.oi.get_driveStick().getThrottle();
        }
        if(_isInverted){
            speed = -speed;
        }
        
        _lastSpeed = speed;
        _drive.arcadeDrive(speed, turn);
    }
    
    public void updateStatus(){
        SmartDashboard.putBoolean("InvertedDrive", _isInverted);
        SmartDashboard.putBoolean("Throttled", _throttleUsed);
        if(_throttleUsed){
            SmartDashboard.putNumber("DriveThrottle", Robot.oi.get_driveStick().getThrottle());
        }else{
            SmartDashboard.putNumber("DriveThrottle", 1);
        }
        
        SmartDashboard.putNumber("TheoreticalSpeed", _lastSpeed);
    }
}
