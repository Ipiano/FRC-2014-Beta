// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.nordicstorm.robotics.subsystems;
import com.sun.squawk.util.MathUtils;
import org.nordicstorm.robotics.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.nordicstorm.robotics.Robot;
/**
 *
 */
public class ClimberActuator extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar climberMotor = RobotMap.climberActuatorclimberMotor;
    AnalogChannel potentiometer = RobotMap.climberActuatorPotentiometer;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS  
    
    public double getLatchSetpoint(){
        return Preferences.getInstance().getInt("ActuatorVertical", 838) - 440;
    }
    public double getClimbSetpoint(){
        return Preferences.getInstance().getInt("ActuatorVertical", 838) - 355;
    }
    public double getFullyExtendedSetpoint(){
        return Preferences.getInstance().getInt("ActuatorVertical", 838) + 142;
    }
    
    // Initialize your subsystem here
    public ClimberActuator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("ClimberActuator", 0.025, 5.0E-6, 0.002);
        setAbsoluteTolerance(3.0);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("ClimberActuator", "PIDSubsystem Controller", getPIDController());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        
        if (climberMotor != null){
            try {
                climberMotor.configNeutralMode(CANJaguar.NeutralMode.kBrake);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }
        }
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
	
        return getPot();
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
	if (climberMotor != null && !(getVerticalSetting() < 0)) {
            try {
                climberMotor.setX(output);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }
        }
        if(Robot.dumper != null){
            adjustDumper();
        }
    }
    
    public double getPot(){
        //return 900 - (MathUtils.log(potentiometer.getAverageValue())-6.831)/4.375e-5;
        //return potentiometer.getAverageValue();
        double x=1000-potentiometer.getAverageValue();
        //x=x/1000;
        //x=1000*x/(1-x);
        return x;
        
    }
    
    public void driveMotor(double speed) throws CANTimeoutException{
        if (climberMotor != null){
            climberMotor.setX(speed);
        }
    }
    
    public void updateStatus(){
        SmartDashboard.putNumber("ActuatorPot",getPot());
        if (SmartDashboard.getBoolean("PrintDebug")) {
            //Put temporary print statements here, they can be turned off by
            //the PrintDebug checkbox on SmartDashboard
            System.out.println("Actuator Pot = " + getPot());
        }
    }
    
    public double getVerticalSetting(){
        return Preferences.getInstance().getInt("ActuatorVertical", 118);
    }
    public void adjustDumper(){
        if (Robot.ratchetClimber.hasStartedClimbing()){
            double percentClimberMotion= (Robot.climberActuator.getPot()-Robot.climberActuator.getLatchSetpoint())/(Robot.climberActuator.getFullyExtendedSetpoint()-Robot.climberActuator.getLatchSetpoint());
            double peak = Robot.dumper.ARM_EXTENDED-((Robot.dumper.ARM_EXTENDED - Robot.dumper.ARM_VERTICAL)*percentClimberMotion);
            Robot.dumper.getArm().setPeak(peak);
            Robot.dumper.getArm().setSetpoint(peak);
            if (!Robot.dumper.getArm().getPIDController().isEnable()){
                Robot.dumper.getArm().enable();
            }
        }
    }
}
