// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.nordicstorm.robotics;
import org.nordicstorm.robotics.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.buttons.*;
/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton _inversionButton;
    public JoystickButton resetClimber;
    public JoystickButton keepAwayMode;
    public JoystickButton driverStraightenActuator;
    public JoystickButton loadFrisbees;
    public JoystickButton resetDumper;
    public JoystickButton setPES;
    public JoystickButton bottomClimber;
    public Joystick _rightJoy;
    public JoystickButton ratchetClimb;
    public JoystickButton actuator;
    public JoystickButton straightenActuator;
    public JoystickButton setToClimbSetpoint;
    public JoystickButton endClimb;
    public JoystickButton overrideDumperArm;
    public JoystickButton overrideDumperBucket;
    public JoystickButton engagePES;
    public Joystick _leftJoy;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton _randomButton;
    private boolean _isInverted = false;
    private int _driveType = RobotMap.DRIVE_ARCADE;
    private boolean _linkedDumper = false;
    private boolean m_PESMode = false;
    
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        _leftJoy = new Joystick(1);
        
        engagePES = new JoystickButton(_leftJoy, 8);
        engagePES.whenPressed(new ReleasePES());
        overrideDumperBucket = new JoystickButton(_leftJoy, 11);
        overrideDumperBucket.whileHeld(new DriveDumperBucket());
        overrideDumperArm = new JoystickButton(_leftJoy, 10);
        overrideDumperArm.whileHeld(new DriveDumperArm());
        endClimb = new JoystickButton(_leftJoy, 6);
        endClimb.whenPressed(new LatchClimber());
        setToClimbSetpoint = new JoystickButton(_leftJoy, 4);
        setToClimbSetpoint.whenPressed(new SetClimberToClimbSetpoint());
        straightenActuator = new JoystickButton(_leftJoy, 5);
        straightenActuator.whenPressed(new SetActuationVertical());
        actuator = new JoystickButton(_leftJoy, 3);
        actuator.whileHeld(new MoveActuator());
        ratchetClimb = new JoystickButton(_leftJoy, 1);
        ratchetClimb.whileHeld(new ClimbWithRatchet());
        _rightJoy = new Joystick(2);
        
        bottomClimber = new JoystickButton(_rightJoy, 9);
        bottomClimber.whenPressed(new DriveClimberToBottom());
        setPES = new JoystickButton(_rightJoy, 12);
        setPES.whenPressed(new ResetPES());
        resetDumper = new JoystickButton(_rightJoy, 5);
        resetDumper.whenPressed(new SetDumperVertical());
        loadFrisbees = new JoystickButton(_rightJoy, 3);
        loadFrisbees.whenPressed(new SetDumperLoad());
        driverStraightenActuator = new JoystickButton(_rightJoy, 4);
        driverStraightenActuator.whenPressed(new SetActuationVertical());
        keepAwayMode = new JoystickButton(_rightJoy, 6);
        keepAwayMode.whileHeld(new KeepAway());
        resetClimber = new JoystickButton(_rightJoy, 10);
        resetClimber.whenPressed(new DriveClimberToTop());
        _inversionButton = new JoystickButton(_rightJoy, 2);
        _inversionButton.whenPressed(new InvertDrive());
        _randomButton = new JoystickButton(_rightJoy, 7);
        _randomButton.whenPressed(new ApproachGoal());
	    
        // SmartDashboard Buttons
        SmartDashboard.putData("DriveToGoal", new DriveToGoal());
        SmartDashboard.putData("TrackGoal", new TrackGoal());
        SmartDashboard.putData("ClimbWithRatchet", new ClimbWithRatchet());
        SmartDashboard.putData("Autonomous", new Autonomous());
        SmartDashboard.putData("MoveActuator", new MoveActuator());
        SmartDashboard.putData("Square Up To Wall", new SquareUpToWall());
        SmartDashboard.putData("Approach Goal", new ApproachGoal());
        SmartDashboard.putData("Toggle Dumper Constant", new ToggleDumperConstant());
        SmartDashboard.putData("Dump Frisbees In Wall", new DumpFrisbeesInWall());
        SmartDashboard.putData("Dump Frisbees In Pyramid", new DumpFrisbeesInPyramid());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick get_rightJoy() {
        return _rightJoy;
    }
    public Joystick get_leftJoy() {
        return _leftJoy;
    }
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
        
    public double getRightY(){
        return _rightJoy.getY();
    }
    
    public double getRightX(){
        return _rightJoy.getX();
    }
    
    public double getRightZ(){
        return _rightJoy.getZ();
    }
    
    public double getThrottle(){
        return (-_rightJoy.getThrottle()+1)/2;
    }
    
    public double getLeftX(){
        return _leftJoy.getX();
    }
    
    public double getLeftY(){
        return _leftJoy.getY();
    }
    
    public boolean getIsInverted() {
        return _isInverted;
    }
    
    public void setIsInverted(boolean isInverted) {
        _isInverted = isInverted;
    }
    
    public int getDriveType() {
        return _driveType;
    }
    
    public void setDriveType(int driveType) {
        _driveType = driveType;
    }
    
    public boolean getTurnDisabled(){
        return _rightJoy.getRawButton(2);
    }
    
    public void setLinkedDumper(boolean newValue){
        _linkedDumper = newValue;
    }
    
    public boolean isDumperLinked(){
        return _linkedDumper;
    }
    
    public double getLeftThrottle(){
        return (_leftJoy.getTwist() + 1)/2.0;
    }
    
    public boolean getPESMode(){
        return m_PESMode;
    }
    
    public void setPESMode(boolean newValue){
        m_PESMode = newValue;
    }
    
    public void updateStatus(){
        SmartDashboard.putBoolean("Inverted Controls", getIsInverted());
        
        if (SmartDashboard.getBoolean("PrintDebug")){
            //Put temporary print statements here, they can be turned off by
            //the PrintDebug checkbox on SmartDashboard
        }
    }
}
