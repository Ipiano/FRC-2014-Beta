// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.nordicstorm.robotics;
    
import edu.wpi.first.wpilibj.AnalogChannel;
import edu.wpi.first.wpilibj.CANJaguar;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Gyro;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.can.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Gyro driveTrainGyro;
    public static CANJaguar driveTrain_leftFrontMotor;
    public static CANJaguar driveTrain_rightFrontMotor;
    public static CANJaguar driveTrain_leftRearMotor;
    public static CANJaguar driveTrain_rightRearMotor;
    public static Ultrasonic driveTrainUltrasonic;
    public static Servo visionCameraServo;
    public static CANJaguar climberActuatorclimberMotor;
    public static AnalogChannel climberActuatorPotentiometer;
    public static DigitalInput ratchetClimberTopSwitch;
    public static DigitalInput ratchetClimberBottomSwitch;
    public static CANJaguar ratchetClimberRatchet;
    public static CANJaguar dumperBucketMotor;
    public static CANJaguar dumperArmMotor;
    public static AnalogChannel dumperBucketPot;
    public static AnalogChannel dumperArmPot;
    public static Servo pESServo;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static final int DRIVE_COUNT = 3;
    public static final int DRIVE_TWIST = 1;
    public static final int DRIVE_ARCADE = 2;
    public static final int DRIVE_TANK = 3;
    public static RobotDrive driveTrainRobotDrive;
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainGyro = new Gyro(1, 1);
	LiveWindow.addSensor("DriveTrain", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(0.007);
        try { 
            driveTrain_leftFrontMotor = new CANJaguar(3);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrain_rightFrontMotor = new CANJaguar(5);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrain_leftRearMotor = new CANJaguar(2);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            driveTrain_rightRearMotor = new CANJaguar(4);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        driveTrainUltrasonic = new Ultrasonic(1, 13, 1, 12);
	LiveWindow.addSensor("DriveTrain", "Ultrasonic", driveTrainUltrasonic);
        
        visionCameraServo = new Servo(1, 10);
	LiveWindow.addActuator("Vision", "CameraServo", visionCameraServo);
        
        try { 
            climberActuatorclimberMotor = new CANJaguar(6);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        climberActuatorPotentiometer = new AnalogChannel(1, 3);
	LiveWindow.addSensor("ClimberActuator", "Potentiometer", climberActuatorPotentiometer);
        
        ratchetClimberTopSwitch = new DigitalInput(1, 14);
	LiveWindow.addSensor("Ratchet Climber", "Top Switch", ratchetClimberTopSwitch);
        
        ratchetClimberBottomSwitch = new DigitalInput(1, 7);
	LiveWindow.addSensor("Ratchet Climber", "Bottom Switch", ratchetClimberBottomSwitch);
        
        try { 
            ratchetClimberRatchet = new CANJaguar(9);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            dumperBucketMotor = new CANJaguar(7);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        try { 
            dumperArmMotor = new CANJaguar(8);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
	
        
        dumperBucketPot = new AnalogChannel(1, 2);
	LiveWindow.addSensor("Dumper", "Bucket Pot", dumperBucketPot);
        
        dumperArmPot = new AnalogChannel(1, 4);
	LiveWindow.addSensor("Dumper", "Arm Pot", dumperArmPot);
        
        pESServo = new Servo(1, 3);
	LiveWindow.addActuator("PES", "Servo", pESServo);
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        if (driveTrain_leftRearMotor != null){
            if (driveTrain_leftFrontMotor != null){
                LiveWindow.addActuator("DriveTrain", "Front Left Motor", driveTrain_leftFrontMotor);
                LiveWindow.addActuator("DriveTrain", "Front Right Motor", driveTrain_rightFrontMotor);
            }
            LiveWindow.addActuator("DriveTrain", "Back Left Motor", driveTrain_leftRearMotor);
            System.out.println(""+driveTrain_rightFrontMotor + driveTrain_leftFrontMotor + driveTrain_rightRearMotor + driveTrain_leftRearMotor);
             if ((null == driveTrain_leftFrontMotor) || (null == driveTrain_rightFrontMotor)) {
                 driveTrainRobotDrive = new RobotDrive(driveTrain_leftRearMotor, driveTrain_rightRearMotor);
                 System.out.println("Two Drivetrain");
             } else {
                 driveTrainRobotDrive = new RobotDrive(driveTrain_leftFrontMotor, driveTrain_leftRearMotor,
                 driveTrain_rightFrontMotor, driveTrain_rightRearMotor);
                 System.out.println("Four Drivetrain");
             }
             driveTrainRobotDrive.setSafetyEnabled(true);
             driveTrainRobotDrive.setExpiration(0.2);
             driveTrainRobotDrive.setSensitivity(0.5);
             driveTrainRobotDrive.setMaxOutput(1.0);
        }
        
        //I added this comment so that TortoiseHG would let me push in order to update the .yml file for RobotBuilder
    }
}
