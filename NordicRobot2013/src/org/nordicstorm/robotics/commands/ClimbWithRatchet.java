// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.nordicstorm.robotics.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.nordicstorm.robotics.Robot;
/**
 *
 */
public class  ClimbWithRatchet extends Command {
    
    
    //Creates a thread to check the switches, faster than just the command
    private class SwitchChecker extends Thread{
        private boolean m_isAborted = false;
        public void run(){
            while (!m_isAborted){
                boolean currentAction = m_isRising;
                checkSwitches();
                if(currentAction != m_isRising){
                    double speed = 0;
                    if(m_isRising){
                        speed = 1;
                    }else{
                        speed = -0.8;
                    }
                    Robot.ratchetClimber.driveMotor(speed);
                }
                this.yield();
            }
        }
        public void abort(){
            m_isAborted = true;
        }
    }
    
    private boolean m_isRising = true;
    private Timer m_timer;
    private boolean m_grabbedPole;
    private double m_startDescent;
    private final double RISE_STROKE_LENGTH = 1.2;
    private double m_startRise;
    private SwitchChecker m_check;
    
    public ClimbWithRatchet() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.ratchetClimber);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        m_startDescent = Timer.getFPGATimestamp();
        Robot.oi.setPESMode(false);
        m_check = new SwitchChecker();
        m_check.start();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        //Check if the climber is at the end
        checkSwitches();
        
        double speed = 0;
        if (m_isRising){
            //Use full speed on the upstroke
            
            //if (Timer.getFPGATimestamp()-m_startRise < 0.6*RISE_STROKE_LENGTH){
                speed = 1;
            //}else{
            //    speed = .8;
            //}
            System.out.println("Raising for next pull");
        }else{
            
            //Go at 80% speed until the pole is grabbed
            if (!m_grabbedPole){
                speed = -.8;
                if (Robot.ratchetClimber.getCurrent() > 12.5 && Timer.getFPGATimestamp() - m_startDescent > 0.5){
                    m_grabbedPole = true;
                }
                System.out.println("Waiting to grab the pole");
            }else{
                //After the pole is grabbed, start a timer. Use the timer as Y in the function y/5 + .7 to get the speed; creates a ramp effect
                
                if (m_timer == null){
                    m_timer = new Timer();
                    m_timer.start();
                    System.out.println("Grabbed the pole");
                }
                double timerSpeed = (m_timer.get()/5) + .7;
                if ((timerSpeed) < 1.0){
                    speed = -timerSpeed;
                    System.out.println("Climbing with speed of " + -timerSpeed);
                }else{
                    speed = -1;
                    System.out.println("Climbing with full speed");
                }
            }
            speed = speed*Robot.oi.getLeftThrottle();
        }
        
        Robot.ratchetClimber.driveMotor(speed);
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.ratchetClimber.driveMotor(0);
        m_check.abort();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
    private void checkSwitches(){
        if(Robot.ratchetClimber.topIsSwitched()){
            m_isRising = false;
            m_grabbedPole = false;
            m_startDescent = Timer.getFPGATimestamp();
            System.out.println("Starting Descent: "+m_startDescent);
        }else if(Robot.ratchetClimber.bottomIsSwitched()){
            m_isRising = true;
            m_timer = null;
            m_startRise = Timer.getFPGATimestamp();
            System.out.println("Starting Rise: "+m_startRise);
            Robot.ratchetClimber.setStartedClimb(true);
        }
    }
}
