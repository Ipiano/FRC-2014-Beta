package org.nordicstorm.robotics.commands;
 
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.nordicstorm.robotics.Robot;
import org.nordicstorm.robotics.RobotMap;
 
/**
 * Drive to the goal using vision tracking.
 */
public class DriveToAngle extends Command {
    
    private double m_numberOfSeconds = 2;
    private double m_speed = 1;
    private double m_angle;
    /**
     * Construct an instance of the DriveToGoal command
     * with the default time.
     */
    public DriveToAngle() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    
    /**
     * Construct an instance of the DriveToGoal command
     * with a custom time.
     */
    public DriveToAngle(double numberOfSeconds, double speed, double angle) {
        this(); // chain to parameter-less constructor
        m_numberOfSeconds = numberOfSeconds;
        m_speed = speed;
        m_angle = angle;
    }
    
    /**
     * Called just before this Command runs the first time.
     */
    protected void initialize() {
        setTimeout(m_numberOfSeconds);
        Robot.driveTrain.setPidMode(Robot.driveTrain.DRIVE_TO_ANGLE_MODE);
        Robot.driveTrain.setSetpointRelative(m_angle);
        Robot.driveTrain.setPidDrivespeed(m_speed);
        Robot.driveTrain.enable();
    }
    
    /**
     * Called repeatedly when this Command is scheduled to run.
     */
    protected void execute() {
    }
    
    /**
     * Make this return true when this Command no longer needs to run execute().
     */
    protected boolean isFinished() {
        return isTimedOut();
    }
    /**
     * Called once after isFinished returns true.
     */
    protected void end() {
        Robot.driveTrain.voltageDrive(0, 0);
        Robot.driveTrain.disable(); // Disable the PID
    }
    
    /**
     * Called when another command which requires one or more of the same
     * subsystems is scheduled to run.
     */
    protected void interrupted() {
        end();
    }
}
