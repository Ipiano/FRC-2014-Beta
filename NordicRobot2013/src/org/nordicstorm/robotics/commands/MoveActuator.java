// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.nordicstorm.robotics.commands;
import edu.wpi.first.wpilibj.can.CANTimeoutException;
import edu.wpi.first.wpilibj.command.Command;
import org.nordicstorm.robotics.Robot;
/**
 *
 */
public class  MoveActuator extends Command {
    public MoveActuator() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.climberActuator);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        Robot.climberActuator.disable();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        double speed = 0;
        if (Robot.climberActuator.getPot() > Robot.climberActuator.getClimbSetpoint()){
                speed = Robot.oi.getLeftY();
                if(Robot.dumper != null){
                    if(Robot.dumper.getArm().getPot() > Robot.dumper.ARM_VERTICAL + 10 && !Robot.ratchetClimber.hasStartedClimbing()){
                        Robot.dumper.getArm().setSetpoint(Robot.dumper.ARM_CARRYING);
                        Robot.dumper.getArm().enable();
                        speed = 0;
                    }
                }
        }
        try {
            Robot.climberActuator.driveMotor(speed);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        if (Robot.dumper != null){
            Robot.climberActuator.adjustDumper();
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }
    // Called once after isFinished returns true
    protected void end() {
        try {
            Robot.climberActuator.driveMotor(0);
        } catch (CANTimeoutException ex) {
            ex.printStackTrace();
        }
        if (Robot.climberActuator.getPot() > Robot.climberActuator.getFullyExtendedSetpoint()){
            Robot.climberActuator.setSetpoint(Robot.climberActuator.getFullyExtendedSetpoint());
        }else{
            Robot.climberActuator.setSetpoint(Robot.climberActuator.getPot());
        }
        Robot.climberActuator.enable();
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
