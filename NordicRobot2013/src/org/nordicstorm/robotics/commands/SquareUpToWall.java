// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.nordicstorm.robotics.commands;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import org.nordicstorm.robotics.Robot;
/**
 *
 */
public class  SquareUpToWall extends Command {
    private Timer m_timer;
    private boolean m_finalStage;
    private double m_startTime;
    public SquareUpToWall() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);
	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }
    // Called just before this Command runs the first time
    protected void initialize() {
        m_timer = null;
        m_finalStage = false;
        m_startTime = Timer.getFPGATimestamp();
    }
    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
        if (m_timer == null){
            if (Robot.driveTrain.getRightCurrent() < 20 && Robot.driveTrain.getLeftCurrent() < 20){
                    Robot.driveTrain.voltageDrive(-7, -7);
                }else{
                    if(Timer.getFPGATimestamp()-m_startTime > 0.8){
                        m_timer = new Timer();
                        m_timer.start();
                    }
                }
        }else if (m_timer.get() < 1){
            Robot.driveTrain.voltageDrive(5, -12);
        }else{
            Robot.driveTrain.voltageDrive(-8, -8);
            setTimeout(0.5);
            m_finalStage = true;
        }
    }
    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return isTimedOut() && m_finalStage;
    }
    // Called once after isFinished returns true
    protected void end() {
        Robot.driveTrain.voltageDrive(0,0);
    }
    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
        end();
    }
}
